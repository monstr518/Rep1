// новая архитектура
req = require ("request");



var request1 = function(id){ // id - идентификатор ответа
	var params;
	var ok = 1; // успешно собрал все актуальные данные для построения запроса
	var NEEDrequestS=[];
	с=MANAGER(форма/доступ к данным в хранилище "lazy"); // [ok,requestN,data]  ok=1 - данные актуальны 
	if(!с[0]){ok=0;NEEDrequestS.push(с[1]);}
	params[с[2].x]=с[2].y;
	a=MANAGER(форма/доступ к данным в хранилище "lazy"); // [ok,requestN,data]  ok=1 - данные актуальны 
	if(!a[0]){ok=0;NEEDrequestS.push(a[1]);}
	b=MANAGER(форма/доступ к данным в хранилище "lazy"); // [ok,requestN,data]  ok=1 - данные актуальны 
	if(!b[0]){ok=0;NEEDrequestS.push(b[1]);}
	params[a[2].x]=b[2].y;
	//....
	if(!ok)return NEEDrequestS; // указывает на потребность повторного запуска после обновления всех неактуальных данных
	url = makeUrl(name,params);
	req(url,function(error, response, body){
		//форматируем ответ и заносим в хранилище "lazy"
		MANAGER2(id);
		});
	return 1;
};


var request2 = function(id){ // id - идентификатор ответа
	var params;
	var ok = 1; // успешно собрал все актуальные данные для построения запроса
	var NEEDrequestS=[];
	с=MANAGER(форма/доступ к данным в хранилище "lazy"); // [ok,requestN,data]  ok=1 - данные актуальны 
	if(!с[0]){ok=0;NEEDrequestS.push(с[1]);}
	params[с[2].x]=с[2].y;
	//....
	if(!ok)return NEEDrequestS; // указывает на потребность повторного запуска после обновления всех неактуальных данных
	url = makeUrl(name,params);
	req(url,function(error, response, body){
		//форматируем ответ и заносим в хранилище "lazy"
		MANAGER2(id);
		});
	return 1;
};


//..................................

function MANAGER(форма/доступ) - способ получения данных из хранилища "lazy" по форме/доступа с учётом актуальности

Для вызова request12 нужно/можно добавить элемент в матрицу-список <<< [id,[],[]]

requestX(id) - получает уникальный id ответа и возвращает список(сделать уникальным) запросов для обновления в случае неудачи.
Имея id и уникальный список запросов в матрицу-список заносится елемент <<< [id,[список запросов],[новые идентификаторы для запросов]]
//  [список запросов].length  ===  [новые идентификаторы для запросов].length

function MANAGER2(id) - получает id в случае успешной обработки обновления.
Имея id ответа нужно исключить его из всех списков [новые идентификаторы для запросов] в матрице-списке
и исключить соответствующие им элементы в [список запросов]
Когда стало так, что в матрице-списке появился элемент с пустыми списками [id,[],[]] можно повторно вызвать запрос для requestX(id)
